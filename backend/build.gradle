plugins {
	id 'org.springframework.boot' version '2.5.3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id "org.asciidoctor.convert" version "1.5.9.2"
	id "org.flywaydb.flyway" version "7.0.3"
	id 'java'
}

group = 'com.minibeit'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	/**
	 * Security
	 */
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	/**
	 * Lombok
	 */
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	/**
	 * JWT Dependencies
	 */
	implementation 'io.jsonwebtoken:jjwt-api:0.11.1'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.1', 'io.jsonwebtoken:jjwt-jackson:0.11.1'

	/**
	 * Database
	 */
	runtimeOnly 'mysql:mysql-connector-java'
	implementation "org.flywaydb:flyway-core"

	/**
	 * QueryDSL
	 */
	implementation("com.querydsl:querydsl-core") // querydsl
	implementation("com.querydsl:querydsl-jpa") // querydsl
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa" // querydsl JPAAnnotationProcessor 사용 지정
	annotationProcessor("jakarta.persistence:jakarta.persistence-api")
	annotationProcessor("jakarta.annotation:jakarta.annotation-api")

	/**
	 * Aws
	 */
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.0.1.RELEASE'

	/**
	 * Test Dependencies
	 */
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	testImplementation('org.mockito:mockito-inline:3.4.0')
	testImplementation('org.mockito:mockito-core:3.4.0')
	testImplementation('org.mockito:mockito-junit-jupiter:3.4.0')

	/**
	 * RestDocs
	 */
	asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.4.RELEASE'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	/**
	 * p6spy
	 */
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.8'
}

jar {
	enabled = false
}

/*************************
 * RestDocs
 *************************/
ext {
	set('snippetsDir', file("build/generated-snippets"))
}

test {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
}

task copyDocument(type: Copy) {
	dependsOn asciidoctor
	from file("build/asciidoc/html5/")
	into file("src/main/resources/static/docs")
}

build {
	dependsOn copyDocument
}

bootJar {
	dependsOn asciidoctor
	from ("${asciidoctor.outputDir}/html5") {
		into 'static/docs'
	}
}

/*************************
 * Query DSL
 *************************/
def generated='src/main/generated'
sourceSets {
	main.java.srcDirs += [ generated ]
}

tasks.withType(JavaCompile) {
	options.annotationProcessorGeneratedSourcesDirectory = file(generated)
}

clean.doLast {
	file(generated).deleteDir()
}

/*************************
 * Flyway
 *************************/
flyway {
	baselineVersion = 0
	encoding = 'UTF-8'
	validateOnMigrate = true
	baselineOnMigrate = true
	locations = ["filesystem:${file('src/main/resources/db/migration').absolutePath}"]
}